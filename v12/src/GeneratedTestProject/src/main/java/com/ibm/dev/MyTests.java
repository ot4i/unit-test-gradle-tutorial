/*
 * MyTests
 * Integration test generated by Generator  on 08-May-2021 22:55:47
 */
package com.ibm.dev;

import org.junit.jupiter.api.AfterEach;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;
import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import org.junit.jupiter.api.Test;
import com.ibm.integration.test.v1.TestMessageAssembly;
import java.io.InputStream;


public class MyTests {

    @AfterEach
    public void cleanupTest() throws TestException {
        // Ensure any mocks created by a test are cleared after the test runs 
        TestSetup.restoreAllMocks();
    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_001() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping1");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970773-00000009-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970773-00000009-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_002() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping1");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097075C-00000006-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097075C-00000006-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_003() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping1");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970747-00000003-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970747-00000003-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_001() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970765-00000007-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970765-00000007-3.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_002() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970755-00000005-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970755-00000005-3.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_003() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970736-00000001-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970736-00000001-3.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_001() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097073F-00000002-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097073F-00000002-3.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_002() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097074E-00000004-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097074E-00000004-3.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_003() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097076C-00000008-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097076C-00000008-3.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_004() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Mapping2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097077B-0000000A-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097077B-0000000A-3.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_001() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097076C-00000008-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097076C-00000008-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_002() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970736-00000001-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970736-00000001-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_003() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970773-00000009-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("true", 1));

        /* Compare Output Message 1 at output terminal true */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("true", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970773-00000009-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_004() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970765-00000007-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970765-00000007-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_005() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970747-00000003-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("true", 1));

        /* Compare Output Message 1 at output terminal true */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("true", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970747-00000003-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_006() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097074E-00000004-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097074E-00000004-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_007() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097073F-00000002-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097073F-00000002-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_008() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970877-0000000B-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("failure", 1));

        /* Compare Output Message 1 at output terminal failure */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("failure", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970877-0000000B-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_009() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097075C-00000006-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("true", 1));

        /* Compare Output Message 1 at output terminal true */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("true", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097075C-00000006-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_010() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097077B-0000000A-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097077B-0000000A-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_011() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 3");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970755-00000005-0.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970755-00000005-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_001() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097073F-00000002-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("true", 1));

        /* Compare Output Message 1 at output terminal true */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("true", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097073F-00000002-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_002() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970736-00000001-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970736-00000001-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_003() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097074E-00000004-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("true", 1));

        /* Compare Output Message 1 at output terminal true */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("true", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097074E-00000004-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_004() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970765-00000007-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970765-00000007-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_005() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970755-00000005-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("false", 1));

        /* Compare Output Message 1 at output terminal false */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("false", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970755-00000005-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_006() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097076C-00000008-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("true", 1));

        /* Compare Output Message 1 at output terminal true */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("true", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097076C-00000008-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_007() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("Divisible by 2");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-6097077B-0000000A-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("true", 1));

        /* Compare Output Message 1 at output terminal true */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("true", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-6097077B-0000000A-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

    @Test
    public void MyApplicationToBeTested_MyMessageFlowToBeTested_MappingError_TestCase_001() throws TestException {

        // Define the SpyObjectReference
        SpyObjectReference nodeReference = new SpyObjectReference().application("MyApplicationToBeTested").messageFlow("MyMessageFlowToBeTested").node("MappingError");   

        // Initialise a NodeSpy
        NodeSpy nodeSpy = new NodeSpy(nodeReference);

        // Declare a new TestMessageAssembly object for the message being sent into the node
        TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

        // Create a Message Assembly from the input data file
        try {
            String messageAssemblyPath = "00006940-60970877-0000000B-1.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            inputMessageAssembly.buildFromRecordedMessageAssembly(messageStream);
        }
        catch (Exception ex) {
            throw new TestException("Failed to load input message", ex);
        }

        // Call the message flow node with the Message Assembly
        nodeSpy.evaluate(inputMessageAssembly, true, "in");

        // Assert the number of times that the node is called
        assertThat(nodeSpy, nodeCallCountIs(1));

        // Assert the terminal propagate count for the message
        assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */

        try {
            TestMessageAssembly actualMessageAssembly = null;
            TestMessageAssembly expectedMessageAssembly = null;

            // Get the TestMessageAssembly object for the actual propagated message
            actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

            // Assert output message body data
            // Get the TestMessageAssembly object for the expected propagated message
            expectedMessageAssembly = new TestMessageAssembly();

            // Create a Message Assembly from the expected output mxml resource
            String messageAssemblyPath = "00006940-60970877-0000000B-2.mxml";
            InputStream messageStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(messageAssemblyPath);
            if (messageStream == null)
            {
                throw new TestException("Unable to locate message assembly file: " + messageAssemblyPath);
            }
            expectedMessageAssembly.buildFromRecordedMessageAssembly(messageStream);

            // Assert that the actual message tree matches the expected message tree
            assertThat(actualMessageAssembly, equalsMessage(expectedMessageAssembly));

        }
        catch (Exception ex) {
            throw new TestException("Failed to compare with expected message", ex);
        }

    }

}
